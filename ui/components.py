"""
–ú–æ–¥—É–ª—å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è ArXiv Assistant
"""

import streamlit as st
from typing import Dict
import logging
import os
from datetime import datetime

from ui.styles import get_article_card_style
from paper_rag.async_processor import async_processor
from paper_rag.embeddings import embedding_manager
from ui.summary import summarize_paper_by_sections
from ui.dialogue_manager import article_dialogue_manager
from paper_rag.pdf_processor import PDFProcessor
from paper_rag.chunking import TextChunker
from paper_rag.embeddings import embedding_manager
from llm_models import llm_factory
from llm_models.config import llm_config

logger = logging.getLogger(__name__)

class UIComponents:
    """
    –ö–ª–∞—Å—Å –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    @staticmethod
    def display_article_card(article: Dict, article_index: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç—å–∏
        
        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å–µ
            article_index: –ò–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        with st.container():
            st.markdown(
                f"""
                <div style="{get_article_card_style()}">
                    <h4 style="color: #333; margin-bottom: 8px;">{article['title']}</h4>
                    <p style="color: #666; margin-bottom: 5px; font-style: italic;">
                        <strong>–ê–≤—Ç–æ—Ä—ã:</strong> {', '.join(article['authors']) if article['authors'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
                    </p>
                    <p style="color: #444; line-height: 1.4; margin-bottom: 10px;">
                        {article['abstract']}
                    </p>
                </div>
                """,
                unsafe_allow_html=True
            )
            
            col1, col2, col3, col4 = st.columns([1, 1, 1, 3])
            
            with col1:
                if st.button("üí¨ –û–±—Å—É–¥–∏—Ç—å", key=f"discuss_{article_index}"):
                    UIComponents._clear_article_state()
                    
                    st.session_state.current_page = "article_view"
                    st.session_state.selected_article = article
                    
                    UIComponents._queue_article_processing(article)
                    
                    st.rerun()
            
            with col2:
                if article['link']:
                    st.link_button("üìÑ –°—Ç–∞—Ç—å—è", article['link'])
            
            with col3:
                if article['pdf_link']:
                    st.link_button("üìÅ PDF", article['pdf_link'])
    
    @staticmethod
    def display_search_form():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (search_query, max_results)
        """
        search_query = st.text_input(
            "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: machine learning, quantum computing, neural networks...",
            help="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –≤ arXiv"
        )
        
        _, col2 = st.columns([3, 1])
        with col2:
            max_results = st.selectbox(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
                options=[5, 10, 15, 20],
                index=1
            )
        
        return search_query, max_results
    
    @staticmethod
    def display_article_header(article: Dict):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        
        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å–µ
        """
        if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"):
            st.session_state.current_page = "search"
            st.rerun()
        
        st.markdown("---")
        
        st.title(article['title'])
        
        if article.get('uploaded_file'):
            st.success("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª")
        else:
            st.info("üîç –°—Ç–∞—Ç—å—è –∏–∑ arXiv")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"**–ê–≤—Ç–æ—Ä—ã:** {', '.join(article['authors']) if article['authors'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
            
            if article['published']:
                published_date = article['published'].split('T')[0]
                st.markdown(f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {published_date}")
            
            if article['arxiv_id']:
                st.markdown(f"**ID:** {article['arxiv_id']}")
            
            if article.get('uploaded_file'):
                if article.get('original_filename'):
                    st.markdown(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:** {article['original_filename']}")
                if article.get('upload_timestamp'):
                    upload_time = article['upload_timestamp'].split('T')[1][:8]
                    st.markdown(f"**–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:** {upload_time}")
        
        with col2:
            if article.get('link'):
                st.link_button("üìÑ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", article['link'], use_container_width=True)
            
            if article['pdf_link']:
                if article.get('uploaded_file'):
                    st.link_button("üìÅ –û—Ç–∫—Ä—ã—Ç—å PDF", article['pdf_link'], use_container_width=True)
                else:
                    st.link_button("üìÅ –°–∫–∞—á–∞—Ç—å PDF", article['pdf_link'], use_container_width=True)
    
    @staticmethod
    def display_article_abstract(article: Dict):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
        
        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å–µ
        """
        st.markdown("---")
        
        st.markdown("### üìù –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è")
        if article['abstract']:
            full_abstract = article.get('full_abstract', article['abstract'])
            st.markdown(f"*{full_abstract}*")
        else:
            st.markdown("*–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞*")
    
    @staticmethod
    def display_summarize_section(article: Dict):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
        
        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å–µ
        """
        st.markdown("---")
        
        arxiv_id = article.get('arxiv_id')
        rag_ready = False
        
        if arxiv_id:
            try:
                chunks_for_article = [
                    chunk for chunk in embedding_manager.chunks_metadata 
                    if chunk.get('metadata', {}).get('arxiv_id') == arxiv_id
                ]
                rag_ready = len(chunks_for_article) > 0
            except:
                rag_ready = False
        
        currently_summarizing = st.session_state.get('summarizing', False)
        
        if rag_ready:
            st.success(f"‚úÖ RAG –≥–æ—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ {arxiv_id} ({len(chunks_for_article) if 'chunks_for_article' in locals() else 0} —á–∞–Ω–∫–æ–≤)")
        else:
            st.info(f"üìÑ RAG –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
        
        _, col2, _ = st.columns([1, 2, 1])
        with col2:
            if currently_summarizing:
                button_text = "‚è≥ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è..."
                button_disabled = True
                button_type = "secondary"
            elif not rag_ready:
                button_text = "üìã Summarize Paper (–æ–∂–∏–¥–∞–Ω–∏–µ RAG)"
                button_disabled = True
                button_type = "secondary" 
            else:
                button_text = "üìã Summarize Paper"
                button_disabled = False
                button_type = "primary"
            
            if st.button(button_text, use_container_width=True, type=button_type, disabled=button_disabled):
                if article.get('arxiv_id') and rag_ready:
                    st.session_state.summarizing = True
                    st.session_state.summary_sections = None
                else:
                    st.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç arXiv ID")
        
        if st.session_state.get('summarizing', False):
            st.markdown("### üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
            
            progress_bar = st.progress(0)
            status_text = st.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏...")
            
            if 'summary_sections' in st.session_state and st.session_state.summary_sections:
                st.session_state.summarizing = False
                st.success("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.rerun()
            else:
                try:
                    with st.spinner("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç—å–∏..."):
                        result = summarize_paper_by_sections(article['arxiv_id'], progress_bar, status_text)
                    
                    if result['success']:
                        st.session_state.summary_sections = result['sections']
                        st.session_state.summarizing = False
                        st.success("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        st.rerun()
                    else:
                        st.session_state.summarizing = False
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        
                except Exception as e:
                    st.session_state.summarizing = False
                    st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        if st.session_state.get('summary_sections'):
            st.markdown("### üìÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º")
            
            sections = st.session_state.summary_sections
            for section in sections:
                with st.expander(f"üìë {section['title']}", expanded=False):
                    #st.markdown(f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {len(section['chunks'])} —á–∞—Å—Ç–µ–π, ~{section['total_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                    st.markdown("**ü§ñ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                    st.markdown(section['summary'])
                    
                    if st.checkbox(f"–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", key=f"show_original_{section['title']}"):
                        st.markdown("**üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:**")
                        st.text_area("", section['original_text'], height=200, key=f"original_{section['title']}")
    
    @staticmethod
    def display_chat_input():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞
        
        Returns:
            –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        user_input = st.text_input(
            "–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –ø–æ —Å—Ç–∞—Ç—å–µ:",
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç—å–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã...",
            key="chat_input"
        )
        
        col1, _ = st.columns([1, 5])
        with col1:
            send_clicked = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        
        return user_input if (send_clicked and user_input) else None
    
    @staticmethod
    def display_search_results(articles: list):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if articles:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            
            st.session_state.search_results = articles
            
            for i, article in enumerate(articles, 1):
                st.markdown(f"### üìñ –°—Ç–∞—Ç—å—è {i}")
                UIComponents.display_article_card(article, i)
                
                if i < len(articles):
                    st.markdown("---")
        else:
            st.warning("üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã.")
    
    @staticmethod
    def display_page_header():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        st.title("üìö ArXiv Assistant")
        st.markdown("### –ü–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö arXiv")
    
    @staticmethod
    def _clear_article_state():
        """
        –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
        """
        if 'chat_history' in st.session_state:
            st.session_state.chat_history = []
        
        if 'summarizing' in st.session_state:
            st.session_state.summarizing = False
        
        if 'summary_sections' in st.session_state:
            del st.session_state.summary_sections
        
        if 'input_counter' in st.session_state:
            st.session_state.input_counter = 0
        
        keys_to_delete = [key for key in st.session_state.keys() if key.startswith('chat_input_')]
        for key in keys_to_delete:
            del st.session_state[key]
        
        if 'rag_ready' in st.session_state:
            st.session_state.rag_ready = False
        
        keys_to_delete = [key for key in st.session_state.keys() if key.startswith('rag_ready_')]
        for key in keys_to_delete:
            del st.session_state[key]
        
        try:
            if 'previous_arxiv_id' in st.session_state:
                article_dialogue_manager.clear_article_dialogue(st.session_state.previous_arxiv_id)
                del st.session_state.previous_arxiv_id
        except ImportError:
            pass
        
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é")
    
    @staticmethod
    def _queue_article_processing(article: Dict):
        """
        –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è RAG
        
        Args:
            article: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ
        """
        if not async_processor:
            logger.warning("RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        arxiv_id = article.get('arxiv_id')
        pdf_link = article.get('pdf_link')
        
        if not arxiv_id or not pdf_link:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏")
            return
        
        try:
            if 'selected_article' in st.session_state:
                previous_arxiv_id = st.session_state.selected_article.get('arxiv_id')
                if previous_arxiv_id and previous_arxiv_id != arxiv_id:
                    st.session_state.previous_arxiv_id = previous_arxiv_id
            
            if article.get('uploaded_file'):
                if os.path.exists(pdf_link):
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {arxiv_id} –Ω–∞–π–¥–µ–Ω: {pdf_link}")
                    
                    if not UIComponents._check_rag_ready(article, use_cache=False):
                        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º RAG –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {arxiv_id}")
                        
                        try:
                            
                            pdf_processor = PDFProcessor()
                            extracted_data = pdf_processor.extract_text_pypdf2(pdf_link)
                            
                            if extracted_data and extracted_data.get('text'):
                                text_content = extracted_data['text']
                                logger.info(f"–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                                
                                chunker = TextChunker()
                                
                                chunk_data = {
                                    'text': text_content,
                                    'metadata': {
                                        'arxiv_id': arxiv_id,
                                        'pdf_path': pdf_link,
                                        'source': 'uploaded_pdf'
                                    }
                                }
                                
                                chunks = chunker.chunk_text(chunk_data)
                                
                                if chunks:
                                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è {arxiv_id}")
                                    
                                    for chunk in chunks:
                                        chunk['metadata']['arxiv_id'] = arxiv_id
                                        chunk['metadata']['source'] = 'uploaded_pdf'
                                        chunk['metadata']['file_path'] = pdf_link
                                    
                                    embedding_manager.add_to_index(chunks)
                                    
                                    logger.info(f"RAG –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {arxiv_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏ –¥–ª—è {arxiv_id}")
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è RAG –æ–±—Ä–∞–±–æ—Ç–∫–∏: {arxiv_id}")
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ RAG –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {arxiv_id}: {e}")
                    else:
                        logger.info(f"RAG —É–∂–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {arxiv_id}")
                    
                    return
                else:
                    logger.error(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_link}")
                    return
            else:
                task_id = async_processor.queue_article(arxiv_id, pdf_link)
                logger.info(f"–°—Ç–∞—Ç—å—è {arxiv_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task_id}")
                
                if 'processing_tasks' not in st.session_state:
                    st.session_state.processing_tasks = {}
                st.session_state.processing_tasks[arxiv_id] = task_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
    
    @staticmethod
    def _check_rag_ready(article: Dict, use_cache: bool = True) -> bool:
        """
        –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        
        Args:
            article: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ RAG –∏–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤
        """
        
        arxiv_id = article.get('arxiv_id')
        if not arxiv_id:
            return False
        
        if article.get('uploaded_file'):
            use_cache = False
        
        cache_key = f"rag_ready_{arxiv_id}"
        if use_cache and cache_key in st.session_state:
            return st.session_state[cache_key]
        
        try:
            chunks_for_article = [
                chunk for chunk in embedding_manager.chunks_metadata 
                if chunk.get('metadata', {}).get('arxiv_id') == arxiv_id
            ]
            
            if len(chunks_for_article) == 0:
                if use_cache:
                    st.session_state[cache_key] = False
                return False

            index_exists = hasattr(embedding_manager, 'index') and embedding_manager.index is not None
            
            rag_ready = len(chunks_for_article) > 0 and index_exists
            
            if use_cache:
                st.session_state[cache_key] = rag_ready
            
            return rag_ready
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG –¥–ª—è {arxiv_id}: {e}")
            if use_cache:
                st.session_state[cache_key] = False
            return False
    
    @staticmethod
    def display_rag_status_indicator(article: Dict):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RAG
        
        Args:
            article: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ
        """
        
        arxiv_id = article.get('arxiv_id')
        if not arxiv_id:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å RAG
        rag_ready = UIComponents._check_rag_ready(article)
        
        # –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if article.get('uploaded_file'):
            if rag_ready:
                st.success(f"‚úÖ RAG –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                with st.spinner("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    import time
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UI
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
                    rag_ready = UIComponents._check_rag_ready(article, use_cache=False)
                    
                    if rag_ready:
                        st.success(f"‚úÖ RAG –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
                        st.rerun()
                    else:
                        st.info("üìÑ –°—Ç–∞—Ç—å—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            # –î–ª—è arXiv —Å—Ç–∞—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if rag_ready:
                st.success(f"‚úÖ RAG –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
            else:
                st.info(f"üìÑ RAG –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
    
    @staticmethod
    def display_enhanced_chat_input(article: Dict = None):
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        
        Args:
            article: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ session_state
        if article is None:
            article = st.session_state.get('selected_article', {})
        
        # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG –±–µ–∑ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        arxiv_id = article.get('arxiv_id')
        rag_ready = False
        
        if arxiv_id:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —á–∞–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏
            try:
                from paper_rag.embeddings import embedding_manager
                chunks_for_article = [
                    chunk for chunk in embedding_manager.chunks_metadata 
                    if chunk.get('metadata', {}).get('arxiv_id') == arxiv_id
                ]
                rag_ready = len(chunks_for_article) > 0
            except:
                rag_ready = False
        
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if rag_ready:
            placeholder_text = "Who are the authors of this paper?"
            input_disabled = False
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.success(f"‚úÖ RAG –≥–æ—Ç–æ–≤ –¥–ª—è {arxiv_id}")
        else:
            st.info("üìÑ –°—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
            placeholder_text = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏..."
            input_disabled = True
        
        # –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –û–ß–ò–°–¢–ö–ò: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–∞–∂–¥—ã–π —Ä–∞–∑
        input_key = f"chat_input_{arxiv_id}_{st.session_state.get('input_counter', 0)}"
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        user_input = st.text_input(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç—å–µ:",
            placeholder=placeholder_text,
            key=input_key,
            disabled=input_disabled
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        col1, _ = st.columns([1, 5])
        with col1:
            # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RAG –≥–æ—Ç–æ–≤ –ò –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            has_text = user_input and user_input.strip()
            button_disabled = input_disabled or not has_text
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
            if rag_ready:
                button_text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                if not has_text:
                    st.caption("üí° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏")
            else:
                button_text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å (RAG –Ω–µ –≥–æ—Ç–æ–≤)"
            
            send_clicked = st.button(
                button_text, 
                use_container_width=True,
                disabled=button_disabled
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if send_clicked and user_input and user_input.strip() and rag_ready:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
            st.session_state.input_counter = st.session_state.get('input_counter', 0) + 1
            return user_input.strip()
        
        return None

    @staticmethod
    def display_llm_model_selector():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ LLM –º–æ–¥–µ–ª–∏
        
        Returns:
            –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–ª–∏ None
        """
        st.markdown("---")
        st.markdown("### ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        try:
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
            available_models = llm_factory.get_available_models()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API –∫–ª—é—á
            openai_api_key = llm_config.get_openai_config().get('api_key') or os.getenv('OPENAI_API_KEY')
            openai_available = openai_api_key
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama - –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            ollama_models = available_models.get('ollama', [])
            ollama_available = any(model.get('installed', False) for model in ollama_models)
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
            model_options = []
            model_descriptions = {}
            
            # OpenAI –º–æ–¥–µ–ª–∏
            if openai_available:
                for model in available_models.get('openai', []):
                    option_key = f"openai_{model['name']}"
                    model_options.append(option_key)
                    model_descriptions[option_key] = f"OpenAI {model['name']} - {model['description']}"
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º OpenAI –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
                model_options.append("openai_disabled")
                model_descriptions["openai_disabled"] = "OpenAI GPT-3.5 - –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á"
            
            # Ollama –º–æ–¥–µ–ª–∏
            if ollama_available:
                for model in available_models.get('ollama', []):
                    if model.get('installed', False):
                        option_key = f"ollama_{model['name']}"
                        model_options.append(option_key)
                        model_descriptions[option_key] = f"Ollama {model['name']} - {model['description']} (–ª–æ–∫–∞–ª—å–Ω–∞—è)"
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if not model_options:
                st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π")
                return None
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏
            selected_option = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
                options=model_options,
                format_func=lambda x: model_descriptions.get(x, x),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã"
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
            if selected_option == "openai_disabled":
                st.warning("‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI —Ç—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á")
                
                # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
                with st.expander("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API"):
                    st.info("""
                    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI –º–æ–¥–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
                    1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ [platform.openai.com](https://platform.openai.com)
                    2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY
                    3. –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á –Ω–∏–∂–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
                    """)
                    
                    api_key = st.text_input(
                        "OpenAI API Key:",
                        type="password",
                        placeholder="sk-...",
                        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á"
                    )
                    
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á"):
                        if api_key and api_key.startswith("sk-"):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                            llm_config.set_openai_api_key(api_key)
                            st.success("‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
                            st.rerun()
                        else:
                            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")
                
                return None
            
            elif selected_option.startswith("openai_"):
                model_name = selected_option.replace("openai_", "")
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: OpenAI {model_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"**–ú–æ–¥–µ–ª—å:** {model_name}")
                    st.info(f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** OpenAI")
                with col2:
                    st.info(f"**–°—Ç–∞—Ç—É—Å:** –î–æ—Å—Ç—É–ø–Ω–∞")
                    st.info(f"**–¢–∏–ø:** –û–±–ª–∞—á–Ω–∞—è")
                
                return {"type": "openai", "name": model_name}
            
            elif selected_option.startswith("ollama_"):
                model_name = selected_option.replace("ollama_", "")
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: Ollama {model_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"**–ú–æ–¥–µ–ª—å:** {model_name}")
                    st.info(f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** Ollama")
                with col2:
                    st.info(f"**–°—Ç–∞—Ç—É—Å:** –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    st.info(f"**–¢–∏–ø:** –õ–æ–∫–∞–ª—å–Ω–∞—è")
                
                return {"type": "ollama", "name": model_name}
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return None
        
        return None

    @staticmethod
    def display_chat_history():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ ChatManager
        # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        pass

    @staticmethod
    def display_pdf_upload_section():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –∏–ª–∏ None
        """
        st.markdown("---")
        st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å—é")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ"):
            st.markdown("""
            **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
            - PDF —Ñ–∞–π–ª—ã (.pdf)
            
            **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:**
            1. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
            2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            4. –°—Ç–∞—Ç—å—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
            **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 MB
            - –¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã
            - –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ `uploaded_pdfs`
            """)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª:",
            type=['pdf'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        if uploaded_file is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
            file_size = len(uploaded_file.getvalue()) / (1024 * 1024)  # MB
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.info(f"üìÑ **–§–∞–π–ª:** {uploaded_file.name}")
            with col2:
                st.info(f"üìè **–†–∞–∑–º–µ—Ä:** {file_size:.2f} MB")
            with col3:
                st.info(f"üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω:** {datetime.now().strftime('%H:%M:%S')}")
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF", type="primary", use_container_width=True):
                with st.spinner("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞..."):
                    try:
                        from ui.pdf_uploader import pdf_uploader
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        article_info = pdf_uploader.process_uploaded_pdf(uploaded_file)
                        
                        if article_info:
                            st.success(f"‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            with st.expander("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=True):
                                col1, col2 = st.columns(2)
                                
                                with col1:
                                    st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {article_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                    st.markdown(f"**–ê–≤—Ç–æ—Ä—ã:** {', '.join(article_info.get('authors', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã']))}")
                                    st.markdown(f"**ID:** {article_info.get('arxiv_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                
                                with col2:
                                    st.markdown(f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {article_info.get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                    st.markdown(f"**–§–∞–π–ª:** {article_info.get('original_filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                    st.markdown(f"**–¢–∏–ø:** –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF")
                                
                                # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
                                st.markdown("**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:**")
                                abstract = article_info.get('abstract', '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                                st.markdown(f"*{abstract}*")
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ç—å–µ
                            if st.button("üí¨ –û–±—Å—É–¥–∏—Ç—å —Å—Ç–∞—Ç—å—é", type="secondary", use_container_width=True):
                                return article_info
                        else:
                            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª")
                            
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        
        return None

    @staticmethod
    def display_uploaded_articles_section():
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
        
        Returns:
            –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –∏–ª–∏ None
        """
        try:
            from ui.pdf_uploader import pdf_uploader
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            uploaded_articles = pdf_uploader.get_uploaded_articles()
            
            if not uploaded_articles:
                return None
            
            st.markdown("---")
            st.markdown("### üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            for i, article in enumerate(uploaded_articles):
                with st.container():
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                    st.markdown(
                        f"""
                        <div style="{get_article_card_style()}">
                            <h4 style="color: #333; margin-bottom: 8px;">{article['title']}</h4>
                            <p style="color: #666; margin-bottom: 5px; font-style: italic;">
                                <strong>–ê–≤—Ç–æ—Ä—ã:</strong> {', '.join(article['authors']) if article['authors'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
                            </p>
                            <p style="color: #444; line-height: 1.4; margin-bottom: 10px;">
                                {article['abstract']}
                            </p>
                            <p style="color: #888; font-size: 0.9em;">
                                üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {article.get('upload_timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
                            </p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                    col1, col2, col3, col4 = st.columns([1, 1, 1, 3])
                    
                    with col1:
                        if st.button("üí¨ –û–±—Å—É–¥–∏—Ç—å", key=f"discuss_uploaded_{i}"):
                            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
                            UIComponents._clear_article_state()
                            
                            st.session_state.current_page = "article_view"
                            st.session_state.selected_article = article
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏ –¥–ª—è RAG
                            UIComponents._queue_article_processing(article)
                            
                            st.rerun()
                    
                    with col2:
                        if article['file_path']:
                            st.link_button("üìÑ –û—Ç–∫—Ä—ã—Ç—å", article['file_path'])
                    
                    with col3:
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_uploaded_{i}"):
                            if pdf_uploader.delete_uploaded_article(article['arxiv_id']):
                                st.success("‚úÖ –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                    
                    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
                    if i < len(uploaded_articles) - 1:
                        st.markdown("---")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {e}")
        
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
ui_components = UIComponents()
