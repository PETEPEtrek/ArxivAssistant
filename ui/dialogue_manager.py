"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import streamlit as st
from typing import Dict, List, Optional, Tuple
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class DialogueMessage:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
    """
    
    def __init__(self, role: str, content: str, timestamp: Optional[datetime] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            role: –†–æ–ª—å ('user' –∏–ª–∏ 'assistant')
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        """
        self.role = role
        self.content = content
        self.timestamp = timestamp or datetime.now()
        self.char_count = len(content)
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'role': self.role,
            'content': self.content,
            'timestamp': self.timestamp.isoformat(),
            'char_count': self.char_count
        }
    
    def __str__(self) -> str:
        return f"{self.role}: {self.content[:50]}..."

class DialogueManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
    """
    
    def __init__(self, max_chars: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            max_chars: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        """
        self.max_chars = max_chars
        self.messages: List[DialogueMessage] = []
        self.summary_block: Optional[str] = None
        self.total_chars = 0
        
    def add_message(self, role: str, content: str) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        message = DialogueMessage(role, content)
        self.messages.append(message)
        self.total_chars += message.char_count
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        if self.total_chars > self.max_chars:
            self._summarize_old_messages()
    
    def _summarize_old_messages(self) -> None:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if len(self.messages) < 2:
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        half_index = len(self.messages) // 2
        messages_to_summarize = self.messages[:half_index]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        summary_text = self._create_summary_text(messages_to_summarize)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–ª–æ–∫—É
        if self.summary_block:
            self.summary_block += f"\n\n**–ü–†–ï–î–´–î–£–©–ò–ô –î–ò–ê–õ–û–ì:**\n{summary_text}"
        else:
            self.summary_block = f"**–ü–†–ï–î–´–î–£–©–ò–ô –î–ò–ê–õ–û–ì:**\n{summary_text}"
        
        # –£–¥–∞–ª—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages = self.messages[half_index:]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        self.total_chars = sum(msg.char_count for msg in self.messages)
        
        logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {half_index} —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–ª–æ—Å—å {len(self.messages)}")
    
    def _create_summary_text(self, messages: List[DialogueMessage]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        """
        summary_parts = []
        
        for i, message in enumerate(messages):
            role_emoji = "üôã" if message.role == 'user' else "ü§ñ"
            summary_parts.append(f"{role_emoji} **{message.role.title()}:** {message.content}")
            
            if i < len(messages) - 1:
                summary_parts.append("")
        
        return "\n".join(summary_parts)
    
    def get_dialogue_context(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        """
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.summary_block:
            context_parts.append(self.summary_block)
            context_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.messages:
            context_parts.append("**–¢–ï–ö–£–©–ò–ô –î–ò–ê–õ–û–ì:**")
            for message in self.messages:
                role_emoji = "üôã" if message.role == 'user' else "ü§ñ"
                context_parts.append(f"{role_emoji} **{message.role.title()}:** {message.content}")
        
        return "\n".join(context_parts)
    
    def get_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        """
        return {
            'total_messages': len(self.messages),
            'total_chars': self.total_chars,
            'has_summary': bool(self.summary_block),
            'summary_length': len(self.summary_block) if self.summary_block else 0,
            'max_chars': self.max_chars
        }
    
    def clear_dialogue(self) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        """
        self.messages.clear()
        self.summary_block = None
        self.total_chars = 0
        logger.info("–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def get_recent_messages(self, count: int = 5) -> List[DialogueMessage]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        return self.messages[-count:] if self.messages else []
    
    def get_dialogue_for_display(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        display_messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.summary_block:
            display_messages.append({
                'role': 'summary',
                'content': self.summary_block,
                'timestamp': None,
                'is_summary': True
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in self.messages:
            display_messages.append({
                'role': message.role,
                'content': message.content,
                'timestamp': message.timestamp,
                'is_summary': False
            })
        
        return display_messages

class ArticleDialogueManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π
        """
        self.article_dialogues: Dict[str, DialogueManager] = {}
    
    def get_dialogue_manager(self, arxiv_id: str) -> DialogueManager:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏ arXiv
            
        Returns:
            –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        """
        if arxiv_id not in self.article_dialogues:
            self.article_dialogues[arxiv_id] = DialogueManager()
        
        return self.article_dialogues[arxiv_id]
    
    def add_message(self, arxiv_id: str, role: str, content: str) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç—å–∏
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏
            role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        dialogue_manager = self.get_dialogue_manager(arxiv_id)
        dialogue_manager.add_message(role, content)
    
    def get_dialogue_context(self, arxiv_id: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        """
        dialogue_manager = self.get_dialogue_manager(arxiv_id)
        return dialogue_manager.get_dialogue_context()
    
    def clear_article_dialogue(self, arxiv_id: str) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏
        """
        if arxiv_id in self.article_dialogues:
            self.article_dialogues[arxiv_id].clear_dialogue()
            logger.info(f"–î–∏–∞–ª–æ–≥ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {arxiv_id} –æ—á–∏—â–µ–Ω")
    
    def get_article_stats(self, arxiv_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        """
        dialogue_manager = self.get_dialogue_manager(arxiv_id)
        return dialogue_manager.get_stats()
    
    def get_dialogue_for_display(self, arxiv_id: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            arxiv_id: ID —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        dialogue_manager = self.get_dialogue_manager(arxiv_id)
        return dialogue_manager.get_dialogue_for_display()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π
article_dialogue_manager = ArticleDialogueManager()
