"""
–ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è LLM –º–æ–¥–µ–ª–µ–π
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Union
import logging

logger = logging.getLogger(__name__)

class BaseLLM(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö LLM –º–æ–¥–µ–ª–µ–π
    """
    
    def __init__(self, model_name: str, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ LLM
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.model_name = model_name
        self.config = kwargs
        self.is_available = False
        
    @abstractmethod
    def generate_response(self, 
                         prompt: str, 
                         context: Optional[str] = None,
                         max_tokens: Optional[int] = None,
                         temperature: float = 0.7) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        
        Args:
            prompt: –í—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–º–ø—Ç
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        pass
    
    @abstractmethod
    def check_availability(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
        """
        pass
    
    @abstractmethod
    def get_model_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
        """
        pass
    
    @abstractmethod
    def generate_chat_response(self, 
                              user_question: str, 
                              article_context: str, 
                              article_metadata: Dict,
                              dialogue_context: Optional[str] = None) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ –ø–æ —Å—Ç–∞—Ç—å–µ
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            article_context: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏
            article_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            dialogue_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        """
        pass
    
    def format_chat_prompt(self, 
                          user_question: str, 
                          article_context: str, 
                          article_metadata: Dict,
                          dialogue_context: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —á–∞—Ç–∞ –ø–æ —Å—Ç–∞—Ç—å–µ
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            article_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏
            article_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            dialogue_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        article_title = article_metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
        authors = article_metadata.get('authors', [])
        authors_text = ', '.join(authors) if authors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã'
        section = article_metadata.get('section', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª')
        
        prompt_parts = [
            f"You are the professional arxiv paper reviewer. You are given a question and a relevant context from the article. You need to answer the question based on the context. You are also given the article title, authors, and section. You are also given the dialogue history if there is any.",
            "",
            f"ARTICLE: \"{article_title}\"",
            f"AUTHORS: {authors_text}",
            f"SECTION: {section}",
            "",
            "RELEVANT CONTEXT FROM THE ARTICLE:",
            article_context
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if dialogue_context:
            prompt_parts.extend([
                "",
                "DIALOGUE HISTORY:",
                dialogue_context
            ])
        
        prompt_parts.extend([
            "",
            f"USER'S QUERY: {user_question}",
            "",
            "INSTRUCTIONS:",
            "1. Answer accurately based on the provided context",
            "2. If information is insufficient, honestly say so",
            "3. Use professional but understandable language",
            "4. Provide specific quotes or references to text parts when possible",
            "5. If the question concerns details not in the context, suggest referring to the full article text",
            "6. Consider previous dialogue when forming the answer",
            "",
            "ANSWER:"
        ])
        
        return "\n".join(prompt_parts)
    
    def format_summary_prompt(self, article_context: str, article_metadata: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            article_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏
            article_metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        article_title = article_metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
        section = article_metadata.get('section')
        total_chunks = article_metadata.get('total_chunks', 1)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        if section and section != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª':
            prompt = f"""Create a brief and structured summary of a scientific article section.

ARTICLE: "{article_title}"
SECTION: "{section}"
VOLUME: {total_chunks} parts

SECTION CONTENT:
{article_context}

Create a brief summary of this section in the following format:

**üéØ KEY POINTS:**
[2-3 sentences about the main ideas of this section]

**üìã CONTENT:**
[Detailed but concise description of what is covered in the section]

**üí° IMPORTANT FINDINGS:**
[Main conclusions and findings from this section]

**üîó CONNECTION TO RESEARCH:**
[How this section relates to the overall research goal]

REQUIREMENTS:
- Answer specifically based on the content of this section
- Use simple scientific language
- Preserve important technical details
- Be brief but informative (2-4 paragraphs)"""
        else:
            # –û–±—â–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
            prompt = f"""Create a brief and structured summary of a scientific article.

ARTICLE: "{article_title}"

CONTENT:
{article_context}

Create a brief summary in the following format:

**üéØ MAIN IDEA:**
[1-2 sentences about the main idea of the article]

**üî¨ METHODS:**
[Brief description of the methods used]

**üìä RESULTS:**
[Key results and findings]

**üí° CONCLUSIONS:**
[Main conclusions of the authors]

**üé™ SIGNIFICANCE:**
[Why this research is important]

Answer briefly and to the point, use simple scientific language."""
        
        return prompt
    
    def validate_response(self, response: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        required_fields = ['content', 'success']
        return all(field in response for field in required_fields)
    
    def handle_error(self, error: Exception, context: str = "") -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–¥–µ–ª–∏
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        logger.error(f"–û—à–∏–±–∫–∞ –≤ {self.model_name} {context}: {error}")
        
        return {
            'success': False,
            'content': '',
            'error': str(error),
            'model': self.model_name,
            'context': context
        }